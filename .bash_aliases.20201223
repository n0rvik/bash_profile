# .bash_aliases

# interactive shell - OK
case $- in
    *i*) ;;
      *) return;;
esac

export TERM=xterm-256color
export COLORTERM=truecolor
export CLICOLOR=1
export USE_LS_COLORS=1

# Сохранять все строки многострочной команды в одной записи списка истории
shopt -s cmdhist
shopt -s histappend
# bash начнёт понимать опечатки и будет переносить вас в папку, название которой вы набрали с ошибкой
shopt -s cdspell
shopt -s checkwinsize
# активирует функции, которые чаще ассоциируются с регулярными выражениями.
shopt -s extglob
# оболочка покажет рекурсивно все каталоги и подкаталоги.
shopt -s globstar
# bash подставляет имена директорий из переменной во время автодополнения.
shopt -s direxpand
# bash будет пытаться исправлять имена каталогов
shopt -s dirspell

export HISTCONTROL=ignorespace:ignoredups
export HISTSIZE=100000
export HISTFILESIZ=100000
export HISTIGNORE="&:[bf]g:pwd:ls:ls -la:ls -ltr:ll:lld:lla:cd:exit:df:htop:atop:top:ps ax"
export HISTTIMEFORMAT="%d/%h/%y - %H:%M:%S "
# export HISTTIMEFORMAT='%h %d %H:%M:%S '
# export HISTTIMEFORMAT="%d/%m/%y %T %t"


# Скопировать файл в файл с расширением ${file}-2020-03-19-130430.bak
function t0bak() {
  local file=$1
  if [ -f "${file}" ]; then
    /usr/bin/cp -v "${file}" "${file}-$(date +%Y-%m-%d-%H%M%S).bak"
  fi
}

# function to set terminal title  
function set-title() {
  if [[ -z "$ORIG" ]]; then
    ORIG=$PS1
  fi
  TITLE="\[\e[2;$*\a\]"
  PS1=${ORIG}${TITLE}
}


# Архивация папки в которой запущена программа в 
# папку $HOME/backup/<name_cur_folder>
function __tar_backup()
{
     local __date=`/usr/bin/date +%Y-%m-%d-%H%M%S`
     local full_path=`/usr/bin/pwd`
     local source_dir=`/usr/bin/pwd | /usr/bin/sed -e 's,^\(.*/\)\?\([^/]*\),\2,'`
     local dest_dir="${HOME}/backup/${source_dir}"
     local name_arch="${dest_dir}/${source_dir}_${__date}.tar.gz"
     local recreatesnar=""
     
     if [ ! -d "$dest_dir" ]; then
         /usr/bin/mkdir -vp "$dest_dir"
     else
        echo -e "\033[0;31mArchive folder exist -> ${dest_dir}, re-create archive files? (y\N) \033[0m"
        read recreatesnar
        if [[ "$recreatesnar" =~ ^(y|yes|Y)$ ]]; then
            /usr/bin/find ${dest_dir} -type f \( -name "${source_dir}_*.tar.gz" \) -exec /usr/bin/rm -i {} \;
        fi
     fi

     echo -e "\n\033[0;33mStart backup ${full_path}\033[0m"
     
     /usr/bin/tar --create --gzip --verbose --dereference \
                  --file="${name_arch}" \
                  --exclude "${dest_dir}/*" \
                 "."
     
     if [ "$?" -eq "0" ]; then
         echo -e "\n\033[0;33mFinish backup ${full_path} -> ${name_arch}\033[0m"
     else
         echo -e "\n\033[0;31mError create backup ${full_path}\033[0m"
     fi
     
}



# Архивация папки в которой запущена программа в инкрементный архив в
# папку $HOME/backup/<name_cur_folder>
# Создает файл архива, файл snar.
# Если папка архива существует, предложит пересоздать архив.
function __tar_backup00()
{
     local __date=`/usr/bin/date +%Y-%m-%d-%H%M%S`
     local full_path=`/usr/bin/pwd`
     local source_dir=`/usr/bin/pwd | /usr/bin/sed -e 's,^\(.*/\)\?\([^/]*\),\2,'`
     local dest_dir="${HOME}/backup/${source_dir}"
     local name_arch="${dest_dir}/${source_dir}_${__date}.tar.gz"
     local name_snar="${dest_dir}/${source_dir}.snar"
     local recreatesnar=""
     
     if [ ! -d "$dest_dir" ]; then
         /usr/bin/mkdir -vp "$dest_dir"
     else
        echo -e "\033[0;31mArchive folder exist -> ${dest_dir}, re-create snar file? (y\N) \033[0m"
        read recreatesnar
        if [[ "$recreatesnar" =~ ^(y|yes|Y)$ ]]; then
            /usr/bin/find ${dest_dir} -type f \( -name "${source_dir}_*.tar.gz" -o -name "${source_dir}.snar" \) -exec /usr/bin/rm -i {} \;
        fi
     fi

     echo -e "\n\033[0;33mStart backup ${full_path}\033[0m"
     
     /usr/bin/tar --create --gzip --verbose --dereference \
                  --file="${name_arch}" \
                  --listed-incremental="${name_snar}" \
                  --exclude "${dest_dir}/*" \
                 "."
     
     if [ "$?" -eq "0" ]; then
         echo -e "\n\033[0;33mFinish backup ${full_path} -> ${name_arch}\033[0m"
     else
         echo -e "\n\033[0;31mError create backup ${full_path}\033[0m"
     fi
     
}

# Архивация папки в которой запущена программа в инкрементный архив в
# папку $HOME/backup/<name_cur_folder>
# Создает файл архива, используя существующий файл snar.
function __tar_backup01()
{
     local __date=`/usr/bin/date +%Y-%m-%d-%H%M%S`
     local full_path=`/usr/bin/pwd`
     local source_dir=`/usr/bin/pwd | /usr/bin/sed -e 's,^\(.*/\)\?\([^/]*\),\2,'`
     local dest_dir="${HOME}/backup/${source_dir}"
     local name_arch="${dest_dir}/${source_dir}_${__date}.tar.gz"
     local name_snar="${dest_dir}/${source_dir}.snar"
     
     [ ! -d "$dest_dir" ] && /usr/bin/mkdir -vp "$dest_dir"
     
     echo -e "\n\033[0;33mStart backup ${full_path}\033[0m"
     
     /usr/bin/tar --create --gzip --verbose --dereference \
                  --file="${name_arch}" \
                  --listed-incremental="${name_snar}" \
                  --exclude "${dest_dir}/*" \
                 "."
     
     if [ "$?" -eq "0" ]; then
         echo -e "\n\033[0;33mFinish backup ${full_path} -> ${name_arch}\033[0m"
     else
         echo -e "\n\033[0;31mError create backup ${full_path}\033[0m"
     fi
     
}

# Инкрементый архивация папки в которой запущена программа в 
# папку $HOME/backup/<name_cur_folder>
function __rsync_backup00()
{

    # Копируем из текущей папки все в /root/$1/backup
    # В папке /root/$1/backup/current лежат последние измененные файлы
    # В папке /root/$1/backup/increment лежат старые измененные файлы

    local __date=`/usr/bin/date +%Y-%m-%d-%H%M%S`

    # Ресурс на сервере для бэкапа
    local full_path=`/usr/bin/pwd`
    local source_dir=`/usr/bin/pwd | /usr/bin/sed -e 's,^\(.*/\)\?\([^/]*\),\2,'`

    # Папка, куда будем складывать архивы
    local dest_dir="${HOME}/backup"
    local syst_dir="${dest_dir}/${source_dir}"

    echo -e "\n\033[0;33mStart backup ${full_path}\033[0m"

    # Создаем папку для инкрементных бэкапов
    [ ! -d "${syst_dir}/increment/" ] & /usr/bin/mkdir -vp "${syst_dir}/increment/"

    # Запускаем непосредственно бэкап с параметрами
    /usr/bin/rsync -a --progress --exclude "${dest_dir}" \
    --stats --human-readable --delete \
    --backup --backup-dir="${syst_dir}/increment/${__date}/" \
    "${full_path}" \
    "${syst_dir}/current/"

    # Чистим папки с инкрементными архивами старше 7-ти дней

    #/usr/bin/find ${syst_dir}/increment/ -maxdepth 1 -type d -mtime +7 -exec rm -rf {} \;

    if [ "$?" -eq "0" ]; then
        echo -e "\n\033[0;33mFinish backup ${full_path} -> ${syst_dir}/current/\033[0m"
    else
        echo -e "\n\033[0;31mError create backup ${full_path}\033[0m"
    fi

}

my_mc() {
    local _s=
    if ps $PPID |grep -q mc; then
        _s="mc:"
    fi
    echo ${_s}
}

# ############
# myprompt
# ############

# Defaulst PS1
# PS1="[\u@\h \W]\\$ "
# PS1="[\u@\h:\l \W]\\$ "
                                                          	
myprompt() {
    # Сброс
    local Color_Off='\[\e[m\]'       # Text Reset

    # Обычные цвета
    local Black='\[\e[0;30m\]'        # Black
    local Red='\[\e[0;31m\]'          # Red
    local Green='\[\e[0;32m\]'        # Green
    local Yellow='\[\e[0;33m\]'       # Yellow
    local Blue='\[\e[0;34m\]'         # Blue
    local Purple='\[\e[0;35m\]'       # Purple
    local Cyan='\[\e[0;36m\]'         # Cyan
    local White='\[\e[0;37m\]'        # White
     
    # Жирные
    local BBlack='\[\e[1;30m\]'       # Black
    local BRed='\[\e[1;31m\]'         # Red
    local BGreen='\[\e[1;32m\]'       # Green
    local BYellow='\[\e[1;33m\]'      # Yellow
    local BBlue='\[\e[1;34m\]'        # Blue
    local BPurple='\[\e[1;35m\]'      # Purple
    local BCyan='\[\e[1;36m\]'        # Cyan
    local BWhite='\[\e[1;37m\]'       # White
     
    # Подчёркнутые
    local UBlack='\[\e[4;30m\]'       # Black
    local URed='\[\e[4;31m\]'         # Red
    local UGreen='\[\e[4;32m\]'       # Green
    local UYellow='\[\e[4;33m\]'      # Yellow
    local UBlue='\[\e[4;34m\]'        # Blue
    local UPurple='\[\e[4;35m\]'      # Purple
    local UCyan='\[\e[4;36m\]'        # Cyan
    local UWhite='\[\e[4;37m\]'       # White
     
    # Фоновые
    local On_Black='\[\e[40m\]'       # Black
    local On_Red='\[\e[41m\]'         # Red
    local On_Green='\[\e[42m\]'       # Green
    local On_Yellow='\[\e[43m\]'      # Yellow
    local On_Blue='\[\e[44m\]'        # Blue
    local On_Purple='\[\e[45m\]'      # Purple
    local On_Cyan='\[\e[46m\]'        # Cyan
    local On_White='\[\e[47m\]'       # White
     
    # Высоко Интенсивные
    local IBlack='\[\e[0;90m\]'       # Black
    local IRed='\[\e[0;91m\]'         # Red
    local IGreen='\[\e[0;92m\]'       # Green
    local IYellow='\[\e[0;93m\]'      # Yellow
    local IBlue='\[\e[0;94m\]'        # Blue
    local IPurple='\[\e[0;95m\]'      # Purple
    local ICyan='\[\e[0;96m\]'        # Cyan
    local IWhite='\[\e[0;97m\]'       # White
     
    # Жирные Высоко Интенсивные
    local BIBlack='\[\e[1;90m\]'      # Black
    local BIRed='\[\e[1;91m\]'        # Red
    local BIGreen='\[\e[1;92m\]'      # Green
    local BIYellow='\[\e[1;93m\]'     # Yellow
    local BIBlue='\[\e[1;94m\]'       # Blue
    local BIPurple='\[\e[1;95m\]'     # Purple
    local BICyan='\[\e[1;96m\]'       # Cyan
    local BIWhite='\[\e[1;97m\]'      # White
     
    # Высоко Интенсивные фоновые
    local On_IBlack='\[\e[0;100m\]'   # Black
    local On_IRed='\[\e[0;101m\]'     # Red
    local On_IGreen='\[\e[0;102m\]'   # Green
    local On_IYellow='\[\e[0;103m\]'  # Yellow
    local On_IBlue='\[\e[0;104m\]'    # Blue
    local On_IPurple='\[\e[0;105m\]'  # Purple
    local On_ICyan='\[\e[0;106m\]'    # Cyan
    local On_IWhite='\[\e[0;107m\]'   # White

    local revert=0
     
    if [[ "$1" == "1" ]]; then
    	revert=1
    fi

    history -a 
    history -c 
    history -r

    local EMOJ=
    if [[ $(/usr/bin/date +%u) -ge 5 ]]; then
        EMOJ=`printf '\U263C'`
    fi
    if [[ ${CLICOLOR} -eq 1 ]]; then
        if [[ $(/usr/bin/id -u) -eq 0 ]]; then

            PS1="${Color_Off}"
            PS1+="["
            
            if [ -n "$EMOJ" ]; then
                PS1+="${Yellow}${EMOJ} "
                PS1+="${Color_Off}"
            fi

            if ps $PPID |grep -q mc; then
                PS1+="${BYellow}mc "
                PS1+="${Color_Off}"
            fi
            
            if [[ ${revert} -eq 1 ]]; then
            	PS1+="${URed}${BRed}\\u${Color_Off}${BRed}@\\h"
            	PS1+="${Color_Off} "
            fi
            
            PS1+="${BIBlue}\\D{%m/%d}"
            PS1+=" "
            PS1+="${BIBlue}\\A"
            PS1+=" "
            PS1+="${BIBlue}j:\\j"
            PS1+=" "
            PS1+="${BIBlue}w:$(/usr/bin/who | /usr/bin/wc -l)"
            PS1+=" "
            PS1+="${BIBlue}tty:$(/usr/bin/tty | /usr/bin/cut -d/ -f4)"
            PS1+="${Color_Off}"
            PS1+="]\\n"
            PS1+="["
            
            if [[ ${revert} -eq 1 ]]; then
            	PS1+="${Yellow}\\W"
            	PS1+="${Color_Off}"
            	PS1+="]"
            	PS1+="${Red}\\\$ "
            	PS1+="${Color_Off}"
            else
                PS1+="${URed}${BRed}\\u"
                PS1+="${Color_Off}"
                PS1+="${BRed}@\\h"
                PS1+="${Color_Off} "
                PS1+="${Yellow}\\W"
                PS1+="${Color_Off}"
                PS1+="]"
                PS1+="${Red}\\\$ "
                PS1+="${Color_Off}"
            fi

        else
            
            PS1="${Color_Off}"
            PS1+="["

            if [ -n "$EMOJ" ]; then
                PS1+="${Yellow}${EMOJ} "
                PS1+="${Color_Off}"
            fi

            if ps $PPID |grep -q mc; then
                PS1+="${BYellow}mc "
                PS1+="${Color_Off}"
            fi

            if [[ ${revert} -eq 1 ]]; then
            	PS1+="${UGreen}${BGreen}\\u${Color_Off}${BGreen}@\\h"
            	PS1+="${Color_Off} "
            fi

            PS1+="${BIBlue}\\D{%m/%d}"
            PS1+=" "
            PS1+="${BIBlue}\\A"
            PS1+=" "
            PS1+="${BIBlue}j:\\j"
            PS1+=" "
            PS1+="${BIBlue}w:$(/usr/bin/who | /usr/bin/wc -l)"
            PS1+=" "
            PS1+="${BIBlue}tty:$(/usr/bin/tty | /usr/bin/cut -d/ -f4)"
            PS1+="${Color_Off}"
            PS1+="]\\n"
            PS1+="["
            
            if [[ ${revert} -eq 1 ]]; then
            	PS1+="${Yellow}\\W"
            	PS1+="${Color_Off}"
            	PS1+="]"
            	PS1+="${BGreen}\\\$ "
            	PS1+="${Color_Off}"
            else
                PS1+="${UGreen}${BGreen}\\u"
                PS1+="${Color_Off}"
                PS1+="${BGreen}@\\h"
                PS1+="${Color_Off} "
                PS1+="${Yellow}\\W"
                PS1+="${Color_Off}"
                PS1+="]"
                PS1+="${Green}\\\$ "
                PS1+="${Color_Off}"
            fi

        fi

    else
        PS1="${Color_Off}$(my_mc)[\\u@\\h \\W]\\\$ "
    fi
    export PS1
    printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"
}

# ############
# myprompt
# ############


myprompt2 () {
    # Сброс
    local Color_Off='\[\e[m\]'       # Text Reset

    # Обычные цвета
    local Black='\[\e[0;30m\]'        # Black
    local Red='\[\e[0;31m\]'          # Red
    local Green='\[\e[0;32m\]'        # Green
    local Yellow='\[\e[0;33m\]'       # Yellow
    local Blue='\[\e[0;34m\]'         # Blue
    local Purple='\[\e[0;35m\]'       # Purple
    local Cyan='\[\e[0;36m\]'         # Cyan
    local White='\[\e[0;37m\]'        # White
     
    # Жирные
    local BBlack='\[\e[1;30m\]'       # Black
    local BRed='\[\e[1;31m\]'         # Red
    local BGreen='\[\e[1;32m\]'       # Green
    local BYellow='\[\e[1;33m\]'      # Yellow
    local BBlue='\[\e[1;34m\]'        # Blue
    local BPurple='\[\e[1;35m\]'      # Purple
    local BCyan='\[\e[1;36m\]'        # Cyan
    local BWhite='\[\e[1;37m\]'       # White

    history -a
    history -c
    history -r

    if [[ ${CLICOLOR} -eq 1 ]]; then
        if [[ $(/usr/bin/id -u) -eq 0 ]]; then
            PS1="${Color_Off}$(my_mc)[${BRed}\\u@${Color_Off}\\h]\\n[${Yellow}\\W${Color_Off}]${BRed}\\\$ ${Color_Off}"
        else
            PS1="${Color_Off}$(my_mc)[${BGreen}\\u@${Color_Off}\\h]\\n[${Yellow}\\W${Color_Off}]${BGreen}\\\$ ${Color_Off}"
        fi
    else
        PS1="${Color_Off}$(my_mc)[\\u@\\h]\\n[\\W]\\\$ "
    fi
    export PS1
    printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"
}

revert_prompt() {
    if [[ "$1" == 1 ]]; then
        PROMPT_COMMAND='myprompt 1'
    elif [[ "$1" == 2 ]]; then
        PROMPT_COMMAND='myprompt2'
    else
        PROMPT_COMMAND='myprompt 0'
    fi
    export PROMPT_COMMAND
}


# prompt = '# _' | '$ _'
easy_prompt() {
    PROMPT_COMMAND='history -a;printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
    if [[ "$(id -u)" -eq 0 ]]; then
    	PS1='\[\e[m\]\[\e[1;31m\]\$ \[\e[m\]'
    else
    	PS1='\[\e[m\]\[\e[1;32m\]\$ \[\e[m\]'
    fi
    export PROMPT_COMMAND
    export PS1
}

_999_fmt_err() {
    ret=$?
    if [[ "${ret}" -ne "0" ]]; then
        echo -e "[\e[0;33m${ret}\e[m]"
    else
        echo ""
    fi
}

if [ -x /usr/bin/mcedit ]; then
    export EDITOR=/usr/bin/mcedit
fi

if type most &>/dev/null ; then
    export PAGER=most
fi

echo 'SELECTED_EDITOR="/usr/bin/mcedit"' > ~/.selected_editor

export LESS=-R
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
export GROFF_NO_SGR=1                  # for konsole and gnome-terminal

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Отображение списка соответствующих файлов
bind 'set show-all-if-ambiguous On'
# Если есть несколько совпадений для завершения, Tab должен циклически перебирать их
bind 'TAB:menu-complete'
# Выполните частичное завершение на первом нажатии вкладки, 
# только начните циклировать полные результаты на втором нажатии вкладки
bind 'set menu-complete-display-prefix on'
bind 'set completion-ignore-case On'

bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\e[C": forward-char'
bind '"\e[D": backward-char'

# add optional items to the path
# for bindir in $HOME/bin $HOME/.local/bin; do
#     if [ -d $bindir ]; then
#         PATH=${bindir}:$PATH
#     fi
# done

# PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:$HOME/.local/bin:$HOME/bin
# export PATH

if type -P dircolors &>/dev/null ; then
    if [[ -f ~/.dir_colors ]] ; then
        eval $(dircolors -b ~/.dir_colors)
    elif [[ -f /etc/DIR_COLORS.256color ]] ; then
        eval $(dircolors -b /etc/DIR_COLORS.256color)
    elif [[ -f /etc/DIR_COLORS ]] ; then
        eval $(dircolors -b /etc/DIR_COLORS)
    fi
fi

export LS_OPTIONS='--color=auto'

alias og='/usr/bin/ls $LS_OPTIONS -ogrt' 2>/dev/null
alias ls='/usr/bin/ls $LS_OPTIONS' 2>/dev/null
alias ll='/usr/bin/ls $LS_OPTIONS -l' 2>/dev/null
alias lld='/usr/bin/ls $LS_OPTIONS -ld' 2>/dev/null
alias lla='/usr/bin/ls $LS_OPTIONS -lA' 2>/dev/null
alias llh='/usr/bin/ls $LS_OPTIONS -lah --time-style=+%F\ %H:%M' 2>/dev/null
alias llt='/usr/bin/ls $LS_OPTIONS -lah --sort=time' 2>/dev/null
alias llr='/usr/bin/ls $LS_OPTIONS -lah --sort=time --revers' 2>/dev/null
alias la='/usr/bin/ls $LS_OPTIONS -A' 2>/dev/null
alias lt='/usr/bin/ls $LS_OPTIONS -ltr' 2>/dev/null
alias l='/usr/bin/ls $LS_OPTIONS -CF' 2>/dev/null
alias l.='/usr/bin/ls -d .* $LS_OPTIONS' 2>/dev/null
alias lsl='/usr/bin/ls -lhFA | less'
alias lsdate='/usr/bin/ls $LS_OPTIONS -l --time-style="+%d-%m-%Y"' 2>/dev/null

alias ffile='/usr/bin/find . -type f -name '
alias fhere='/usr/bin/find . -name '
alias psg='/usr/bin/ps aux | /usr/bin/grep -v grep | /usr/bin/grep -i -e VSZ -e'
alias mkdir='/usr/bin/mkdir -pv'
alias wget='/usr/bin/wget -c'
alias histg='history | /usr/bin/grep'
alias hostip='/usr/bin/curl http://ipecho.net/plain; echo'
alias net='/usr/bin/netstat -ntulp'
alias j='/usr/bin/jobs -l'
alias ports='/usr/bin/netstat -tulanp'

### Set default interfaces for sys admin related commands

## All of our servers eth1 is connected to the Internets via vlan / router etc  ##
alias dnstop='/usr/bin/dnstop -l 5 ens160'
alias vnstat='/usr/bin/vnstat -i ens160'
alias iftop='/usr/sbin/iftop -i ens160'
alias tcpdump='/usr/sbin/tcpdump -i ens160'
alias ethtool='/usr/sbin/ethtool ens160'

# work on wlan0 by default #
# Only useful for laptop as all servers are without wireless interface
alias iwconfig='/usr/bin/iwconfig wlan0'

### Get system memory, cpu usage, and gpu memory info quickly
## pass options to free ##
alias meminfo='/usr/bin/free -m -l -t'

## get top process eating memory
alias psmem='/usr/bin/ps auxf | /usr/bin/sort -nr -k 4'
alias psmem10='/usr/bin/ps auxf | /usr/bin/sort -nr -k 4 | head -10'

## get top process eating cpu ##
alias pscpu='/usr/bin/ps auxf | /usr/bin/sort -nr -k 3'
alias pscpu10='/usr/bin/ps auxf | /usr/bin/sort -nr -k 3 | head -10'

#  15 процессов, которые больше всего потребляют памяти
alias top15='/usr/bin/top -b -o +%MEM | /usr/bin/head -n 22'

## Get server cpu info ##
alias cpuinfo='/usr/bin/lscpu'

## older system use /proc/cpuinfo ##
##alias cpuinfo='less /proc/cpuinfo' ##

## get GPU ram on desktop / laptop##
alias gpumeminfo='/usr/bin/grep -i --color memory /var/log/Xorg.0.log'

alias grep='/usr/bin/grep --color=auto'
alias fgrep='/usr/bin/grep --color=auto'
alias egrep='/usr/bin/grep --color=auto'

alias h='history 10'
alias mc='. /usr/libexec/mc/mc-wrapper.sh'

alias myip="/usr/bin/ip a | /usr/bin/grep inet | /usr/bin/grep 'scope global'"

if type -P vim &>/dev/null; then
    alias vi=/usr/bin/vim
fi

# Install grc from https://github.com/garabik/grc
# cd /usr/local/src && git clone https://github.com/garabik/grc.git && cd grc && ./install.sh

if type grc &>/dev/null; then
   if [ -r ~/.grc.bashrc ]; then
       . ~/.grc.bashrc
   elif [ -r /etc/grc.bashrc ]; then
       . /etc/grc.bashrc
   fi
fi

# Set the Less input preprocessor.
if type lesspipe.sh &>/dev/null; then
    export LESS_ADVANCED_PREPROCESSOR=1
    export LESSOPEN="|$(type -p lesspipe.sh) %s"
fi

if type pygmentize &>/dev/null; then
    export LESSCOLORIZER=`type -p pygmentize`
fi

# [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

if type colordiff &>/dev/null ; then
    alias diff=`type -p colordiff`
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

PROMPT_COMMAND=myprompt
export PROMPT_COMMAND

if type cowsay &>/dev/null; then
    if type fortune &>/dev/null; then
        export FORTUNE_FILE=/usr/share/games/fortunes/fortunes
        fortune | cowsay
    else
        echo "Hi, people! Today is $(/usr/bin/date +'%A %d %B %Y')" | cowsay
    fi
fi

